plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'org.nowstart'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar { enabled = false }

ext {
    set('springCloudVersion', "2022.0.2")
}

dependencies {
    // RestApi
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.1'
    developmentOnly 'org.springframework.boot:spring-boot-devtools:3.0.4'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.0'
    testImplementation 'org.springframework.security:spring-security-test:6.0.2'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.4'
    runtimeOnly 'com.h2database:h2:2.1.214'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.1.2'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security:3.0.4'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'

    // mapstruct 추가
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    // swagger 추가
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    // QueryDls 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    // Jasypt 추가
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // JWT 추가
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

    // Actuator 추가
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.0'
    implementation 'de.codecentric:spring-boot-admin-starter-server:3.0.2'
    implementation 'de.codecentric:spring-boot-admin-starter-client:3.0.2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/nowstart/study/*Application*",
                    "org/nowstart/study/config/*",
                    "org/nowstart/study/data/*",
                    "org/nowstart/study/exception/*",
                    "org/nowstart/study/utils/*"
            ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // Jacoco Rule 활성화
            enabled = true

            // 룰 체크 단위
            element = 'CLASS' // Option: BUNDLE(default), PACKAGE, CLASS, SOURCEFILE, METHOD

            // Method 커버리지
            limit {
                counter = 'METHOD' // Option: INSTRUCTION(default), LINE, BRANCH, CLASS, METHOD, COMPLEXITY
                value = 'COVEREDRATIO'
                // Option: COVEREDRATIO(default), TOTALCOUNT, MISSEDCOUNT, COVEREDCOUNT, MISSEDRATIO
                minimum = 1.00
            }

            // Branch 커버리지
            limit {
                counter = 'BRANCH' // Option: INSTRUCTION(default), LINE, BRANCH, CLASS, METHOD, COMPLEXITY
                value = 'COVEREDRATIO'
                // Option: COVEREDRATIO(default), TOTALCOUNT, MISSEDCOUNT, COVEREDCOUNT, MISSEDRATIO
                minimum = 0.60
            }

            // 커버리지 체크 제외 클래스
            excludes = [
                    "org.nowstart.study.*Application*",
                    'org.nowstart.study.config.*',
                    'org.nowstart.study.data.*',
                    'org.nowstart.study.exception.*',
                    "org.nowstart.study.utils.*"
            ]
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

test {
    if (System.properties.containsKey('spring.profiles.active')) {
        String activeProfile = System.properties['spring.profiles.active']
        println "profile: $activeProfile"
        systemProperty "spring.profiles.active", activeProfile
    }

    useJUnitPlatform()
    ignoreFailures = true
    finalizedBy 'jacocoTestReport'
    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}